<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


    <!--
        配置匿名访问路径，当请求这些匿名路径的时候，不会被拦截掉，直接就可以访问资源
    -->
    <security:http security="none" pattern="/js/**"></security:http>
    <security:http security="none" pattern="/favicon.ico"></security:http>
    <security:http security="none" pattern="/login.html"></security:http>

    <!--
        http标签：用于定义相关的权限控制
        auto-config属性：配置是否使用security框架提供的自动化配置，比如security提供的登录页面、
                        登出页面的功能等，如果是false,就必须手动提供一个自定义的登陆页面
        use-expressions属性：是否启用表达式来配置相关权限的功能
    -->
    <security:http auto-config="true" use-expressions="true">
        <!--
            intercept-url标签：用来配置对哪些url进行拦截，需要哪些权限才能访问。
            pattern属性：/**，表示对所有的url都进行拦截。
            access属性：表示拥有哪些权限才能访问被拦截的url
        -->
<!--        <security:intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')"></security:intercept-url>-->

        <security:intercept-url pattern="/a.html" access="isAuthenticated()"></security:intercept-url>

        <security:intercept-url pattern="/b.html" access="hasAuthority('add')"></security:intercept-url>

        <security:intercept-url pattern="/c.html" access="hasRole('ROLE_MANAGER')"></security:intercept-url>

        <security:intercept-url pattern="/d.html" access="hasRole('ADMIN')"></security:intercept-url>

<!--        <security:intercept-url pattern="/hello/demo1.do" access="hasRole('ADMIN')"></security:intercept-url>-->


        <!--
            配置自定义登陆页面
            login-page:表示使用哪一个页面作为登陆页面
            login-processing-url:就是表单中的action的请求路径
            username-parameter:表单中提交的用户名的参数名称
            password-parameter：密码的参数名称
            default-target-url:当登陆成功以后，默认跳转的url
            always-use-default-target：总是使用默认的跳转的url
            authentication-failure-url:登陆失败后跳转的url
        -->
        <security:form-login login-page="/login.html"
                             login-processing-url="/login.do"
                             username-parameter="username"
                             password-parameter="password"
                             default-target-url="/index.html"
                             always-use-default-target="true"
                             authentication-failure-url="/login.html"></security:form-login>

        <!--
            关闭跨站请求伪装过滤器
        -->
        <security:csrf disabled="true"></security:csrf>

        <!--
            退出登陆
            logout-url属性：指定退出登陆的url,只要使用该url发送请求，就会自动退出登陆
            logout-success-url属性：成功退出登陆后，要跳转的url
            invalidate-session属性：清空session

        -->
        <security:logout logout-url="/logout.do" logout-success-url="/login.html" invalidate-session="true"></security:logout>

    </security:http>

    <!--
        配置认证管理器：用来执行认证操作的
    -->
   <!-- <security:authentication-manager>
        &lt;!&ndash;
            配置认证提供者：用来执行具体的认证逻辑的
        &ndash;&gt;

        <security:authentication-provider>
            &lt;!&ndash;
                配置用户服务:用来获取具体的用户信息提供给认证提供者进行认证操作。
            &ndash;&gt;
            <security:user-service>
                &lt;!&ndash;
                    配置具体的用户信息
                    name:登陆的用户名
                    password：登陆的密码,{noop}表示这是一个明文密码，没有被加密过的密码
                    authorities：赋予角色或权限等
                &ndash;&gt;
                <security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN"></security:user>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>-->

    <security:authentication-manager>
        <security:authentication-provider user-service-ref="securityUserService">
            <security:password-encoder ref="passwordEncoder"></security:password-encoder>
        </security:authentication-provider>
    </security:authentication-manager>

    <context:component-scan base-package="com.itheima"></context:component-scan>


    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>

    <!--声明使用注解配置权限-->
    <security:global-method-security pre-post-annotations="enabled"></security:global-method-security>

</beans>